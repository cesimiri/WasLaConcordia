@page "/admin/navigation"
@using Identity.Api.Interfaces
@using LaConcordia.Model
@using LaConcordia.Repository
@inject INavigationRepository NavigationRepository
@inject IJSRuntime JSRuntime

<style>
    .page-container {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
        padding: 2rem;
    }

    .content-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        padding: 2rem;
        backdrop-filter: blur(10px);
        animation: slideIn 0.5s ease-out;
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .header-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #e0e0e0;
    }

    .page-title {
        font-size: 2rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 0;
    }

    .btn-modern {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 50px;
        font-weight: 600;
        transition: all 0.3s ease;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary-modern {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .btn-primary-modern:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }

    .alert-modern {
        padding: 1rem 1.5rem;
        border-radius: 15px;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        animation: slideIn 0.3s ease;
    }

    .alert-danger {
        background: linear-gradient(135deg, #ffe6e6 0%, #ffcccc 100%);
        color: #c62828;
        border-left: 4px solid #f44336;
    }

    .alert-success {
        background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
        color: #2e7d32;
        border-left: 4px solid #4caf50;
    }

    .navigation-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        overflow: hidden;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.05);
        border-radius: 15px;
    }

    .navigation-table thead {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .navigation-table th {
        padding: 1.2rem;
        text-align: left;
        font-weight: 600;
        letter-spacing: 0.5px;
    }

    .navigation-table td {
        padding: 1rem 1.2rem;
        background: white;
        border-bottom: 1px solid #f0f0f0;
    }

    .navigation-table tbody tr {
        transition: all 0.3s ease;
    }

    .navigation-table tbody tr:hover {
        background: #f8f9fa;
        transform: scale(1.01);
    }

    .navigation-table tbody tr.table-secondary {
        background: #f8f9fa;
    }

    .navigation-table tbody tr.table-secondary:hover {
        background: #e9ecef;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .btn-icon {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-edit {
        background: #e3f2fd;
        color: #1976d2;
    }

    .btn-edit:hover {
        background: #1976d2;
        color: white;
        transform: scale(1.1);
    }

    .btn-delete {
        background: #ffebee;
        color: #c62828;
    }

    .btn-delete:hover {
        background: #c62828;
        color: white;
        transform: scale(1.1);
    }

    .btn-move-up {
        background: #e8f5e8;
        color: #2e7d32;
    }

    .btn-move-up:hover {
        background: #2e7d32;
        color: white;
        transform: scale(1.1);
    }

    .btn-move-down {
        background: #fff3e0;
        color: #f57c00;
    }

    .btn-move-down:hover {
        background: #f57c00;
        color: white;
        transform: scale(1.1);
    }

    .btn-icon:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        transform: none !important;
    }

    .badge-modern {
        display: inline-block;
        padding: 0.35rem 0.8rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        margin: 0.125rem;
    }

    .badge-success {
        background: #e8f5e8;
        color: #2e7d32;
    }

    .badge-danger {
        background: #ffebee;
        color: #c62828;
    }

    .badge-secondary {
        background: #f5f5f5;
        color: #666;
    }

    .badge-info {
        background: #e3f2fd;
        color: #1976d2;
    }

    /* Modal Styles */
    .modal-modern {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        animation: fadeIn 0.3s ease;
        padding: 20px;
        box-sizing: border-box;
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    .modal-content-modern {
        background: white;
        border-radius: 15px;
        width: 100%;
        max-width: 480px;
        max-height: calc(100vh - 40px);
        animation: slideUp 0.3s ease;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    @@keyframes slideUp {
        from {
            transform: translateY(30px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    .modal-header {
        padding: 1rem 1.5rem;
        border-bottom: 1px solid #e0e0e0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        flex-shrink: 0;
        height: 60px;
    }

    .modal-title {
        font-size: 1.2rem;
        font-weight: 600;
        margin: 0;
    }

    .btn-close-modern {
        background: transparent;
        border: none;
        color: white;
        font-size: 1.2rem;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
    }

    .btn-close-modern:hover {
        background: rgba(255, 255, 255, 0.2);
    }

    .modal-body {
        padding: 1rem;
        overflow-y: auto;
        flex: 1;
        max-height: calc(100vh - 180px);
    }

    .modal-footer {
        padding: 1rem 1.5rem;
        border-top: 1px solid #e0e0e0;
        background: #f8f9fa;
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        flex-shrink: 0;
        height: 70px;
        align-items: center;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: #2c3e50;
        font-size: 0.9rem;
    }

    .form-control {
        width: 100%;
        padding: 0.6rem;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        font-size: 0.9rem;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.1);
    }

    .input-group {
        display: flex;
        border-radius: 8px;
        overflow: hidden;
    }

    .input-group .form-control {
        border-radius: 0;
        border-right: none;
    }

    .input-group-text {
        background: #f8f9fa;
        border: 2px solid #e0e0e0;
        border-left: none;
        padding: 0.6rem;
        display: flex;
        align-items: center;
        font-size: 0.9rem;
        width: 50px;
        justify-content: center;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-top: 0.75rem;
    }

    .form-check-input {
        width: 18px;
        height: 18px;
        cursor: pointer;
    }

    .form-check-label {
        cursor: pointer;
        user-select: none;
        font-weight: 600;
        color: #2c3e50;
        font-size: 0.9rem;
    }

    .btn-modern {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 25px;
        font-weight: 600;
        transition: all 0.3s ease;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
        white-space: nowrap;
    }

    .loading-spinner {
        display: inline-block;
        width: 16px;
        height: 16px;
        border: 2px solid #f3f3f3;
        border-top: 2px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .text-muted {
        color: #7f8c8d;
        font-size: 0.8rem;
        margin-top: 0.25rem;
        line-height: 1.3;
    }

    .validation-message {
        color: #e74c3c;
        font-size: 0.8rem;
        margin-top: 0.25rem;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
        margin: 0 -0.5rem;
    }

    .col-md-6 {
        flex: 0 0 50%;
        max-width: 50%;
        padding: 0 0.5rem;
    }

    .col-12 {
        flex: 0 0 100%;
        max-width: 100%;
        padding: 0 0.5rem;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .modal-content-modern {
            width: 95%;
            max-height: 90vh;
        }

        .col-md-6 {
            flex: 0 0 100%;
            max-width: 100%;
        }

        .modal-footer {
            flex-direction: column-reverse;
            gap: 0.75rem;
        }

        .btn-modern {
            width: 100%;
            justify-content: center;
        }
    }

    @@media (max-width: 576px) {
        .modal-content-modern {
            width: 98%;
            margin: 1rem;
        }

        .modal-header {
            padding: 0.75rem 1rem;
        }

        .modal-body {
            padding: 1rem;
        }

        .modal-footer {
            padding: 0.75rem 1rem;
        }

        .modal-title {
            font-size: 1.1rem;
        }

        .btn-modern {
            padding: 0.6rem 1.2rem;
            font-size: 0.85rem;
        }
    }
</style>

<div class="page-container">
    <div class="content-card">
        <div class="header-section">
            <h1 class="page-title">
                <i class="fas fa-compass"></i> Administración de Navegación
            </h1>
            <button class="btn-modern btn-primary-modern" @onclick="() => OpenModal(null)">
                <i class="fas fa-plus"></i>
                Nuevo Item
            </button>
        </div>

        @if (errorMessage != null)
        {
            <div class="alert-modern alert-danger">
                <i class="fas fa-exclamation-triangle"></i>
                @errorMessage
                <button type="button" style="background: transparent; border: none; color: inherit; margin-left: auto; cursor: pointer;" @onclick="() => errorMessage = null">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }

        @if (successMessage != null)
        {
            <div class="alert-modern alert-success">
                <i class="fas fa-check-circle"></i>
                @successMessage
                <button type="button" style="background: transparent; border: none; color: inherit; margin-left: auto; cursor: pointer;" @onclick="() => successMessage = null">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }

        @if (navigationItems == null)
        {
            <div class="empty-state">
                <div class="loading-spinner"></div>
                <p style="margin-top: 1rem;">Cargando items de navegación...</p>
            </div>
        }
        else
        {
            <table class="navigation-table">
                <thead>
                    <tr>
                        <th style="width: 50px;">#</th>
                        <th style="width: 300px;">Título</th>
                        <th>URL</th>
                        <th style="width: 300px;">Icono</th>
                        <th style="width: 100px;">Orden</th>
                        <th style="width: 100px;">Estado</th>
                        <th style="width: 150px;">Rol</th>
                        <th style="width: 200px; text-align: center;">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!navigationItems.Any())
                    {
                        <tr>
                            <td colspan="8" class="empty-state">
                                <i class="fas fa-list-ul"></i>
                                <p>No hay elementos de navegación</p>
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var item in GetHierarchicalItems())
                        {
                            <tr class="@(item.ParentId != null ? "table-secondary" : "")">
                                <td style="color: #7f8c8d;">@item.Id</td>
                                <td>
                                    @if (item.ParentId != null)
                                    {
                                        <span style="color: #7f8c8d; margin-right: 0.5rem;">↳</span>
                                    }
                                    <strong>@item.Title</strong>
                                </td>
                                <td>
                                    <code style="background: #f8f9fa; padding: 0.25rem 0.5rem; border-radius: 5px;">@(item.Url ?? "-")</code>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(item.Icon))
                                    {
                                        <i class="@item.Icon" style="margin-right: 0.5rem;"></i>
                                        <small class="text-muted">@item.Icon</small>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    <span class="badge-modern badge-secondary">@item.Order</span>
                                </td>
                                <td>
                                    @if (item.IsActive)
                                    {
                                        <span class="badge-modern badge-success">
                                            <i class="fas fa-check-circle" style="margin-right: 0.25rem;"></i>Activo
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge-modern badge-danger">
                                            <i class="fas fa-times-circle" style="margin-right: 0.25rem;"></i>Inactivo
                                        </span>
                                    }
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(item.RequiredRole))
                                    {
                                        <span class="badge-modern badge-info">
                                            <i class="fas fa-lock" style="margin-right: 0.25rem;"></i>@item.RequiredRole
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Público</span>
                                    }
                                </td>
                                <td>
                                    <div class="action-buttons" style="justify-content: center;">
                                        <button class="btn-icon btn-edit" @onclick="() => OpenModal(item)" title="Editar">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn-icon btn-delete" @onclick="() => DeleteItem(item.Id)" title="Eliminar" disabled="@isProcessing">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                        <button class="btn-icon btn-move-up" @onclick="() => MoveItemUp(item.Id)" disabled="@(isProcessing || !CanMoveUp(item))" title="Subir">
                                            <i class="fas fa-arrow-up"></i>
                                        </button>
                                        <button class="btn-icon btn-move-down" @onclick="() => MoveItemDown(item.Id)" disabled="@(isProcessing || !CanMoveDown(item))" title="Bajar">
                                            <i class="fas fa-arrow-down"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
    </div>
</div>

<!-- Modal -->
@if (showModal)
{
    <div class="modal-modern" @onclick="CloseModal">
        <div class="modal-content-modern" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h2 class="modal-title">
                    <i class="fas @(editingItem == null ? "fa-plus" : "fa-edit")"></i>
                    @(editingItem == null ? "Nuevo Item de Navegación" : "Editar Item de Navegación")
                </h2>
                <button type="button" class="btn-close-modern" @onclick="CloseModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <EditForm Model="currentItem" OnValidSubmit="SaveItem">
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert-modern alert-danger" />

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-text-width" style="margin-right: 0.5rem;"></i>Título <span style="color: #e74c3c;">*</span>
                                </label>
                                <InputText class="form-control" @bind-Value="currentItem.Title" placeholder="Ej: Dashboard" />
                                <ValidationMessage For="@(() => currentItem.Title)" class="validation-message" />
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-link" style="margin-right: 0.5rem;"></i>URL
                                </label>
                                <InputText class="form-control" @bind-Value="currentItem.Url" placeholder="Ej: /dashboard" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-icons" style="margin-right: 0.5rem;"></i>Icono
                                </label>
                                <div class="input-group">
                                    <InputText class="form-control" @bind-Value="currentItem.Icon" placeholder="Ej: fas fa-home" />
                                    <span class="input-group-text">
                                        @if (!string.IsNullOrEmpty(currentItem.Icon))
                                        {
                                            <i class="@currentItem.Icon"></i>
                                        }
                                        else
                                        {
                                            <i class="fas fa-image text-muted"></i>
                                        }
                                    </span>
                                </div>
                                <small class="text-muted">
                                    Usar clases de Font Awesome (ej: fas fa-home)
                                </small>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-sort-numeric-up" style="margin-right: 0.5rem;"></i>Orden
                                </label>
                                <InputNumber class="form-control" @bind-Value="currentItem.Order" />
                                <small class="text-muted">Menor número = Mayor prioridad</small>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-folder" style="margin-right: 0.5rem;"></i>Item Padre
                                </label>
                                <InputSelect class="form-control" @bind-Value="currentItem.ParentId">
                                    <option value="">-- Ninguno (Item raíz) --</option>
                                    @foreach (var parent in navigationItems.Where(x => x.Id != currentItem.Id))
                                    {
                                        <option value="@parent.Id">@parent.Title</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-shield-alt" style="margin-right: 0.5rem;"></i>Rol Requerido
                                </label>
                                <InputText class="form-control" @bind-Value="currentItem.RequiredRole" placeholder="Ej: Admin, User" />
                                <small class="text-muted">Dejar vacío para acceso público</small>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-12">
                            <div class="form-check">
                                <InputCheckbox class="form-check-input" @bind-Value="currentItem.IsActive" id="isActiveCheck" />
                                <label class="form-check-label" for="isActiveCheck">
                                    <i class="fas fa-power-off" style="margin-right: 0.5rem;"></i>
                                    Item Activo
                                </label>
                            </div>
                            <small class="text-muted">Los items inactivos no se mostrarán en el menú</small>
                        </div>
                    </div>
                </div>
                
                <div class="modal-footer">
                    <button type="button" class="btn-modern" style="background: #e0e0e0; color: #666;" @onclick="CloseModal" disabled="@isProcessing">
                        <i class="fas fa-times"></i> Cancelar
                    </button>
                    <button type="submit" class="btn-modern btn-primary-modern" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <div class="loading-spinner" style="width: 16px; height: 16px;"></div>
                            <span style="margin-left: 0.5rem;">Guardando...</span>
                        }
                        else
                        {
                            <i class="fas fa-save"></i>
                            <span>Guardar</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<NavigationItemDto> navigationItems = new List<NavigationItemDto>();
    private NavigationItemDto currentItem = new NavigationItemDto();
    private NavigationItemDto? editingItem;
    private bool isProcessing = false;
    private string? errorMessage;
    private string? successMessage;
    private bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        try
        {
            navigationItems = (await NavigationRepository.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar items: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
    }

    private List<NavigationItemDto> GetHierarchicalItems()
    {
        var result = new List<NavigationItemDto>();
        var rootItems = navigationItems.Where(x => x.ParentId == null).OrderBy(x => x.Order);

        foreach (var root in rootItems)
        {
            result.Add(root);
            result.AddRange(navigationItems.Where(x => x.ParentId == root.Id).OrderBy(x => x.Order));
        }

        return result;
    }

    private bool CanMoveUp(NavigationItemDto item)
    {
        var siblings = navigationItems.Where(x => x.ParentId == item.ParentId).OrderBy(x => x.Order).ToList();
        return siblings.IndexOf(item) > 0;
    }

    private bool CanMoveDown(NavigationItemDto item)
    {
        var siblings = navigationItems.Where(x => x.ParentId == item.ParentId).OrderBy(x => x.Order).ToList();
        return siblings.IndexOf(item) < siblings.Count - 1;
    }

    private void OpenModal(NavigationItemDto? item)
    {
        editingItem = item;
        if (item != null)
        {
            currentItem = new NavigationItemDto
            {
                Id = item.Id,
                ParentId = item.ParentId,
                Title = item.Title ?? "",
                Url = item.Url ?? "",
                Icon = item.Icon ?? "",
                Order = item.Order,
                IsActive = item.IsActive,
                RequiredRole = item.RequiredRole ?? ""
            };
        }
        else
        {
            currentItem = new NavigationItemDto
            {
                IsActive = true,
                Order = navigationItems.Any() ? navigationItems.Max(x => x.Order) + 10 : 10
            };
        }
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        editingItem = null;
        currentItem = new NavigationItemDto();
    }

    private async Task SaveItem()
    {
        if (string.IsNullOrWhiteSpace(currentItem.Title))
        {
            errorMessage = "El título es requerido";
            return;
        }

        isProcessing = true;
        errorMessage = null;

        try
        {
            if (editingItem == null)
            {
                await NavigationRepository.CreateAsync(currentItem);
                successMessage = "Item creado exitosamente";
            }
            else
            {
                await NavigationRepository.UpdateAsync(currentItem);
                successMessage = "Item actualizado exitosamente";
            }

            await LoadItems();
            CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DeleteItem(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro de eliminar este item? Esta acción no se puede deshacer.");

        if (confirmed)
        {
            isProcessing = true;
            errorMessage = null;

            try
            {
                await NavigationRepository.DeleteAsync(id);
                successMessage = "Item eliminado exitosamente";
                await LoadItems();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error al eliminar: {ex.Message}";
                Console.WriteLine($"Error: {ex}");
            }
            finally
            {
                isProcessing = false;
            }
        }
    }

    private async Task MoveItemUp(int id)
    {
        await MoveItem(id, "up");
    }

    private async Task MoveItemDown(int id)
    {
        await MoveItem(id, "down");
    }

    private async Task MoveItem(int id, string direction)
    {
        isProcessing = true;
        errorMessage = null;

        try
        {
            await NavigationRepository.MoveItemAsync(id, direction);
            await LoadItems();
            successMessage = $"Item movido {(direction == "up" ? "arriba" : "abajo")} exitosamente";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al mover item: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isProcessing = false;
        }
    }
}