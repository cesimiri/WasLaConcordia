@page "/admin/navigation"
@using Identity.Api.Interfaces
@using LaConcordia.Model
@using LaConcordia.Repository
@inject INavigationRepository NavigationRepository
@inject IJSRuntime JSRuntime

<!-- Importar CSS común y específico -->
<link href="~/css/AdminCommon.css" rel="stylesheet" />
<link href="~/css/AdminNavegation.css" rel="stylesheet" />

<div class="page-container">
    <div class="content-card">
        <div class="header-section">
            <h1 class="page-title">
                <i class="fas fa-compass"></i> Administración de Navegación
            </h1>
            <button class="btn-modern btn-primary-modern" @onclick="() => OpenModal(null)">
                <i class="fas fa-plus"></i>
                Nuevo Item
            </button>
        </div>

        @if (errorMessage != null)
        {
            <div class="alert-modern alert-danger">
                <i class="fas fa-exclamation-triangle"></i>
                @errorMessage
                <button type="button" style="background: transparent; border: none; color: inherit; margin-left: auto; cursor: pointer;" @onclick="() => errorMessage = null">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }

        @if (successMessage != null)
        {
            <div class="alert-modern alert-success">
                <i class="fas fa-check-circle"></i>
                @successMessage
                <button type="button" style="background: transparent; border: none; color: inherit; margin-left: auto; cursor: pointer;" @onclick="() => successMessage = null">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }

        @if (navigationItems == null)
        {
            <div class="empty-state">
                <div class="loading-spinner"></div>
                <p style="margin-top: 1rem;">Cargando items de navegación...</p>
            </div>
        }
        else
        {
            <table class="admin-table navigation-table">
                <thead>
                    <tr>
                        <th style="width: 50px;">#</th>
                        <th style="width: 300px;">Título</th>
                        <th>URL</th>
                        <th style="width: 300px;">Icono</th>
                        <th style="width: 100px;">Orden</th>
                        <th style="width: 100px;">Estado</th>
                        <th style="width: 150px;">Rol</th>
                        <th style="width: 200px; text-align: center;">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!navigationItems.Any())
                    {
                        <tr>
                            <td colspan="8" class="empty-state">
                                <i class="fas fa-list-ul"></i>
                                <p>No hay elementos de navegación</p>
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var item in GetHierarchicalItems())
                        {
                            <tr class="@(item.ParentId != null ? "table-secondary" : "")">
                                <td style="color: #7f8c8d;">@item.Id</td>
                                <td>
                                    @if (item.ParentId != null)
                                    {
                                        <span style="color: #7f8c8d; margin-right: 0.5rem;">↳</span>
                                    }
                                    <strong>@item.Title</strong>
                                </td>
                                <td>
                                    <code style="background: #f8f9fa; padding: 0.25rem 0.5rem; border-radius: 5px;">@(item.Url ?? "-")</code>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(item.Icon))
                                    {
                                        <i class="@item.Icon" style="margin-right: 0.5rem;"></i>
                                        <small class="text-muted">@item.Icon</small>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    <span class="badge-modern badge-secondary">@item.Order</span>
                                </td>
                                <td>
                                    @if (item.IsActive)
                                    {
                                        <span class="badge-modern badge-success">
                                            <i class="fas fa-check-circle" style="margin-right: 0.25rem;"></i>Activo
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge-modern badge-danger">
                                            <i class="fas fa-times-circle" style="margin-right: 0.25rem;"></i>Inactivo
                                        </span>
                                    }
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(item.RequiredRole))
                                    {
                                        <span class="badge-modern badge-info">
                                            <i class="fas fa-lock" style="margin-right: 0.25rem;"></i>@item.RequiredRole
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Público</span>
                                    }
                                </td>
                                <td>
                                    <div class="action-buttons" style="justify-content: center;">
                                        <button class="btn-icon btn-edit" @onclick="() => OpenModal(item)" title="Editar">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn-icon btn-delete" @onclick="() => DeleteItem(item.Id)" title="Eliminar" disabled="@isProcessing">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                        <button class="btn-icon btn-move-up" @onclick="() => MoveItemUp(item.Id)" disabled="@(isProcessing || !CanMoveUp(item))" title="Subir">
                                            <i class="fas fa-arrow-up"></i>
                                        </button>
                                        <button class="btn-icon btn-move-down" @onclick="() => MoveItemDown(item.Id)" disabled="@(isProcessing || !CanMoveDown(item))" title="Bajar">
                                            <i class="fas fa-arrow-down"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
    </div>
</div>

<!-- Modal -->
@if (showModal)
{
    <div class="modal-modern" @onclick="CloseModal">
        <div class="modal-content-modern" @onclick:stopPropagation="true">
            <div class="modal-header-modern">
                <h2 class="modal-title-modern">
                    <i class="fas @(editingItem == null ? "fa-plus" : "fa-edit")"></i>
                    @(editingItem == null ? "Nuevo Item de Navegación" : "Editar Item de Navegación")
                </h2>
                <button type="button" class="btn-close-modern" @onclick="CloseModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <EditForm Model="currentItem" OnValidSubmit="SaveItem">
                <div class="modal-body-modern">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert-danger" />

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-text-width" style="margin-right: 0.5rem;"></i>Título <span class="text-danger">*</span>
                                </label>
                                <InputText class="form-control" @bind-Value="currentItem.Title" placeholder="Ej: Dashboard" />
                                <ValidationMessage For="@(() => currentItem.Title)" class="validation-message" />
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-link" style="margin-right: 0.5rem;"></i>URL
                                </label>
                                <InputText class="form-control" @bind-Value="currentItem.Url" placeholder="Ej: /dashboard" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-icons" style="margin-right: 0.5rem;"></i>Icono
                                </label>
                                <div class="input-group">
                                    <InputText class="form-control" @bind-Value="currentItem.Icon" placeholder="Ej: fas fa-home" />
                                    <span class="input-group-text">
                                        @if (!string.IsNullOrEmpty(currentItem.Icon))
                                        {
                                            <i class="@currentItem.Icon"></i>
                                        }
                                        else
                                        {
                                            <i class="fas fa-image text-muted"></i>
                                        }
                                    </span>
                                </div>
                                <small class="text-muted">
                                    Usar clases de Font Awesome (ej: fas fa-home)
                                </small>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-sort-numeric-up" style="margin-right: 0.5rem;"></i>Orden
                                </label>
                                <InputNumber class="form-control" @bind-Value="currentItem.Order" />
                                <small class="text-muted">Menor número = Mayor prioridad</small>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-folder" style="margin-right: 0.5rem;"></i>Item Padre
                                </label>
                                <InputSelect class="form-control" @bind-Value="currentItem.ParentId">
                                    <option value="">-- Ninguno (Item raíz) --</option>
                                    @foreach (var parent in navigationItems.Where(x => x.Id != currentItem.Id))
                                    {
                                        <option value="@parent.Id">@parent.Title</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-shield-alt" style="margin-right: 0.5rem;"></i>Rol Requerido
                                </label>
                                <InputText class="form-control" @bind-Value="currentItem.RequiredRole" placeholder="Ej: Admin, User" />
                                <small class="text-muted">Dejar vacío para acceso público</small>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-12">
                            <div class="form-check">
                                <InputCheckbox class="form-check-input" @bind-Value="currentItem.IsActive" id="isActiveCheck" />
                                <label class="form-check-label" for="isActiveCheck">
                                    <i class="fas fa-power-off" style="margin-right: 0.5rem;"></i>
                                    Item Activo
                                </label>
                            </div>
                            <small class="text-muted">Los items inactivos no se mostrarán en el menú</small>
                        </div>
                    </div>
                </div>

                <div class="modal-footer-modern">
                    <button type="button" class="btn-modern btn-secondary-modern" @onclick="CloseModal" disabled="@isProcessing">
                        <i class="fas fa-times"></i> Cancelar
                    </button>
                    <button type="submit" class="btn-modern btn-primary-modern" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <div class="spinner-border"></div>
                            <span style="margin-left: 0.5rem;">Guardando...</span>
                        }
                        else
                        {
                            <i class="fas fa-save"></i>
                            <span>Guardar</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<NavigationItemDto> navigationItems = new List<NavigationItemDto>();
    private NavigationItemDto currentItem = new NavigationItemDto();
    private NavigationItemDto? editingItem;
    private bool isProcessing = false;
    private string? errorMessage;
    private string? successMessage;
    private bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        try
        {
            navigationItems = (await NavigationRepository.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar items: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
    }

    private List<NavigationItemDto> GetHierarchicalItems()
    {
        var result = new List<NavigationItemDto>();
        var rootItems = navigationItems.Where(x => x.ParentId == null).OrderBy(x => x.Order);

        foreach (var root in rootItems)
        {
            result.Add(root);
            result.AddRange(navigationItems.Where(x => x.ParentId == root.Id).OrderBy(x => x.Order));
        }

        return result;
    }

    private bool CanMoveUp(NavigationItemDto item)
    {
        var siblings = navigationItems.Where(x => x.ParentId == item.ParentId).OrderBy(x => x.Order).ToList();
        return siblings.IndexOf(item) > 0;
    }

    private bool CanMoveDown(NavigationItemDto item)
    {
        var siblings = navigationItems.Where(x => x.ParentId == item.ParentId).OrderBy(x => x.Order).ToList();
        return siblings.IndexOf(item) < siblings.Count - 1;
    }

    private void OpenModal(NavigationItemDto? item)
    {
        editingItem = item;
        if (item != null)
        {
            currentItem = new NavigationItemDto
            {
                Id = item.Id,
                ParentId = item.ParentId,
                Title = item.Title ?? "",
                Url = item.Url ?? "",
                Icon = item.Icon ?? "",
                Order = item.Order,
                IsActive = item.IsActive,
                RequiredRole = item.RequiredRole ?? ""
            };
        }
        else
        {
            currentItem = new NavigationItemDto
            {
                IsActive = true,
                Order = navigationItems.Any() ? navigationItems.Max(x => x.Order) + 10 : 10
            };
        }
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        editingItem = null;
        currentItem = new NavigationItemDto();
    }

    private async Task SaveItem()
    {
        if (string.IsNullOrWhiteSpace(currentItem.Title))
        {
            errorMessage = "El título es requerido";
            return;
        }

        isProcessing = true;
        errorMessage = null;

        try
        {
            if (editingItem == null)
            {
                await NavigationRepository.CreateAsync(currentItem);
                successMessage = "Item creado exitosamente";
            }
            else
            {
                await NavigationRepository.UpdateAsync(currentItem);
                successMessage = "Item actualizado exitosamente";
            }

            await LoadItems();
            CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DeleteItem(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro de eliminar este item? Esta acción no se puede deshacer.");

        if (confirmed)
        {
            isProcessing = true;
            errorMessage = null;

            try
            {
                await NavigationRepository.DeleteAsync(id);
                successMessage = "Item eliminado exitosamente";
                await LoadItems();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error al eliminar: {ex.Message}";
                Console.WriteLine($"Error: {ex}");
            }
            finally
            {
                isProcessing = false;
            }
        }
    }

    private async Task MoveItemUp(int id)
    {
        await MoveItem(id, "up");
    }

    private async Task MoveItemDown(int id)
    {
        await MoveItem(id, "down");
    }

    private async Task MoveItem(int id, string direction)
    {
        isProcessing = true;
        errorMessage = null;

        try
        {
            await NavigationRepository.MoveItemAsync(id, direction);
            await LoadItems();
            successMessage = $"Item movido {(direction == "up" ? "arriba" : "abajo")} exitosamente";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al mover item: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isProcessing = false;
        }
    }
}