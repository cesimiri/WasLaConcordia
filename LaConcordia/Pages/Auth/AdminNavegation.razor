@page "/admin/navigation"
<link href="css/admin-navigation.css" rel="stylesheet" />
@using Identity.Api.Interfaces
@using LaConcordia.Model
@using LaConcordia.Repository
@inject INavigationRepository NavigationRepository
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h1 class="h3 mb-0 text-gray-800">
                <i class="oi oi-compass me-2"></i>Administración de Navegación
            </h1>
        </div>
    </div>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="oi oi-warning me-2"></i>@errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
        </div>
    }

    @if (successMessage != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="oi oi-check me-2"></i>@successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
        </div>
    }

    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">
                <i class="oi oi-list me-2"></i>Items de Navegación
            </h6>
            <button class="btn btn-primary btn-sm" @onclick="() => OpenModal(null)">
                <i class="oi oi-plus me-2"></i>Nuevo Item
            </button>
        </div>
        <div class="card-body">
            @if (navigationItems == null)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="mt-3 text-muted">Cargando items de navegación...</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th style="width: 50px;">#</th>
                                <th style ="width: 300px;">Título</th>
                                <th>URL</th>
                                <th style="width: 300px;">Icono</th>
                                <th style="width: 100px;">Orden</th>
                                <th style="width: 100px;">Estado</th>
                                <th style="width: 150px;">Rol</th>
                                <th style="width: 200px;">Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (!navigationItems.Any())
                            {
                                <tr>
                                    <td colspan="8" class="text-center py-4">
                                        <i class="oi oi-inbox text-muted" style="font-size: 3rem;"></i>
                                        <p class="mt-2 text-muted">No hay elementos de navegación</p>
                                    </td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var item in GetHierarchicalItems())
                                {
                                    <tr class="@(item.ParentId != null ? "table-secondary" : "")">
                                        <td class="text-muted">@item.Id</td>
                                        <td>
                                            @if (item.ParentId != null)
                                            {
                                                <span class="text-muted ms-3">↳</span>
                                            }
                                            <strong>@item.Title</strong>
                                        </td>
                                        <td>
                                            <code>@(item.Url ?? "-")</code>
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(item.Icon))
                                            {
                                                <i class="@item.Icon me-2"></i>
                                                <small class="text-muted">@item.Icon</small>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-secondary">@item.Order</span>
                                        </td>
                                        <td>
                                            @if (item.IsActive)
                                            {
                                                <span class="badge bg-success">
                                                    <i class="oi oi-circle-check me-1"></i>Activo
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">
                                                    <i class="oi oi-circle-x me-1"></i>Inactivo
                                                </span>
                                            }
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(item.RequiredRole))
                                            {
                                                <span class="badge bg-info">
                                                    <i class="oi oi-lock-locked me-1"></i>@item.RequiredRole
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Público</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm" role="group">
                                                <button class="btn btn-outline-primary"
                                                        @onclick="() => OpenModal(item)"
                                                        title="Editar">
                                                    <i class="fas fa-pencil-alt"></i>
                                                </button>
                                                <button class="btn btn-outline-danger"
                                                        @onclick="() => DeleteItem(item.Id)"
                                                        title="Eliminar"
                                                        disabled="@(isProcessing)">
                                                    <i class="oi oi-trash"></i>
                                                </button>
                                                <button class="btn btn-outline-secondary"
                                                        @onclick="() => MoveItemUp(item.Id)"
                                                        disabled="@(isProcessing || !CanMoveUp(item))"
                                                        title="Subir">
                                                    <i class="oi oi-arrow-top"></i>
                                                </button>
                                                <button class="btn btn-outline-secondary"
                                                        @onclick="() => MoveItemDown(item.Id)"
                                                        disabled="@(isProcessing || !CanMoveDown(item))"
                                                        title="Bajar">
                                                    <i class="oi oi-arrow-bottom"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal @(showModal ? "show d-block" : "")" tabindex="-1" style="@(showModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="oi oi-@(editingItem == null ? "plus" : "pencil") me-2"></i>
                    @(editingItem == null ? "Nuevo Item de Navegación" : "Editar Item de Navegación")
                </h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <EditForm Model="currentItem" OnValidSubmit="SaveItem">
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">
                                <i class="oi oi-text me-1"></i>Título <span class="text-danger">*</span>
                            </label>
                            <InputText class="form-control" @bind-Value="currentItem.Title" placeholder="Ej: Dashboard" />
                        </div>

                        <div class="col-md-6 mb-3">
                            <label class="form-label">
                                <i class="oi oi-link-intact me-1"></i>URL
                            </label>
                            <InputText class="form-control" @bind-Value="currentItem.Url" placeholder="Ej: /dashboard" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">
                                <i class="oi oi-image me-1"></i>Icono
                            </label>
                            <div class="input-group">
                                <InputText class="form-control" @bind-Value="currentItem.Icon" placeholder="Ej: oi oi-home" />
                                <span class="input-group-text">
                                    @if (!string.IsNullOrEmpty(currentItem.Icon))
                                    {
                                        <i class="@currentItem.Icon"></i>
                                    }
                                    else
                                    {
                                        <i class="oi oi-image text-muted"></i>
                                    }
                                </span>
                            </div>
                            <small class="text-muted">
                                <a href="https://iconic.app/open-iconic/" target="_blank">Ver iconos disponibles</a>
                            </small>
                        </div>

                        <div class="col-md-6 mb-3">
                            <label class="form-label">
                                <i class="oi oi-sort-ascending me-1"></i>Orden
                            </label>
                            <InputNumber class="form-control" @bind-Value="currentItem.Order" />
                            <small class="text-muted">Menor número = Mayor prioridad</small>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">
                                <i class="oi oi-folder me-1"></i>Item Padre
                            </label>
                            <InputSelect class="form-control" @bind-Value="currentItem.ParentId">
                                <option value="">-- Ninguno (Item raíz) --</option>
                                @foreach (var parent in navigationItems.Where(x => x.Id != currentItem.Id))
                                {
                                    <option value="@parent.Id">@parent.Title</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="col-md-6 mb-3">
                            <label class="form-label">
                                <i class="oi oi-shield me-1"></i>Rol Requerido
                            </label>
                            <InputText class="form-control" @bind-Value="currentItem.RequiredRole" placeholder="Ej: Admin, User" />
                            <small class="text-muted">Dejar vacío para acceso público</small>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-12">
                            <div class="form-check form-switch">
                                <InputCheckbox class="form-check-input" @bind-Value="currentItem.IsActive" id="isActiveCheck" />
                                <label class="form-check-label" for="isActiveCheck">
                                    <i class="oi oi-power-standby me-1"></i>
                                    Item Activo
                                </label>
                            </div>
                            <small class="text-muted">Los items inactivos no se mostrarán en el menú</small>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal" disabled="@isProcessing">
                        <i class="oi oi-x me-2"></i>Cancelar
                    </button>
                    <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="oi oi-check me-2"></i>
                        }
                        Guardar
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private List<NavigationItemDto> navigationItems = new List<NavigationItemDto>();
    private NavigationItemDto currentItem = new NavigationItemDto();
    private NavigationItemDto? editingItem;
    private bool isProcessing = false;
    private string? errorMessage;
    private string? successMessage;
    private bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        try
        {
            navigationItems = (await NavigationRepository.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar items: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
    }

    private List<NavigationItemDto> GetHierarchicalItems()
    {
        var result = new List<NavigationItemDto>();
        var rootItems = navigationItems.Where(x => x.ParentId == null).OrderBy(x => x.Order);

        foreach (var root in rootItems)
        {
            result.Add(root);
            result.AddRange(navigationItems.Where(x => x.ParentId == root.Id).OrderBy(x => x.Order));
        }

        return result;
    }

    private bool CanMoveUp(NavigationItemDto item)
    {
        var siblings = navigationItems.Where(x => x.ParentId == item.ParentId).OrderBy(x => x.Order).ToList();
        return siblings.IndexOf(item) > 0;
    }

    private bool CanMoveDown(NavigationItemDto item)
    {
        var siblings = navigationItems.Where(x => x.ParentId == item.ParentId).OrderBy(x => x.Order).ToList();
        return siblings.IndexOf(item) < siblings.Count - 1;
    }

    private void OpenModal(NavigationItemDto? item)
    {
        editingItem = item;
        if (item != null)
        {
            currentItem = new NavigationItemDto
            {
                Id = item.Id,
                ParentId = item.ParentId,
                Title = item.Title ?? "",
                Url = item.Url ?? "",
                Icon = item.Icon ?? "",
                Order = item.Order,
                IsActive = item.IsActive,
                RequiredRole = item.RequiredRole ?? ""
            };
        }
        else
        {
            currentItem = new NavigationItemDto
            {
                IsActive = true,
                Order = navigationItems.Any() ? navigationItems.Max(x => x.Order) + 10 : 10
            };
        }
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        editingItem = null;
        currentItem = new NavigationItemDto();
    }

    private async Task SaveItem()
    {
        if (string.IsNullOrWhiteSpace(currentItem.Title))
        {
            errorMessage = "El título es requerido";
            return;
        }

        isProcessing = true;
        errorMessage = null;

        try
        {
            if (editingItem == null)
            {
                await NavigationRepository.CreateAsync(currentItem);
                successMessage = "Item creado exitosamente";
            }
            else
            {
                await NavigationRepository.UpdateAsync(currentItem);
                successMessage = "Item actualizado exitosamente";
            }

            await LoadItems();
            CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DeleteItem(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro de eliminar este item? Esta acción no se puede deshacer.");

        if (confirmed)
        {
            isProcessing = true;
            errorMessage = null;

            try
            {
                await NavigationRepository.DeleteAsync(id);
                successMessage = "Item eliminado exitosamente";
                await LoadItems();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error al eliminar: {ex.Message}";
                Console.WriteLine($"Error: {ex}");
            }
            finally
            {
                isProcessing = false;
            }
        }
    }

    private async Task MoveItemUp(int id)
    {
        await MoveItem(id, "up");
    }

    private async Task MoveItemDown(int id)
    {
        await MoveItem(id, "down");
    }

    private async Task MoveItem(int id, string direction)
    {
        isProcessing = true;
        errorMessage = null;

        try
        {
            await NavigationRepository.MoveItemAsync(id, direction);
            await LoadItems();
            successMessage = $"Item movido {(direction == "up" ? "arriba" : "abajo")} exitosamente";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al mover item: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isProcessing = false;
        }
    }
}

