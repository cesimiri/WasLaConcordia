@page "/users"
@using LaConcordia.Model
@using LaConcordia.Repository
@using Microsoft.AspNetCore.Components.Authorization
@inject IUsersRepository usersRepository
@inject IAccountsRepository accountsRepository
@inject IDisplayMessage displayMessage
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Admin")]

<style>
    .page-container {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
        padding: 2rem;
    }

    .content-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        padding: 2rem;
        backdrop-filter: blur(10px);
        animation: slideIn 0.5s ease-out;
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .header-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #e0e0e0;
    }

    .page-title {
        font-size: 2rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 0;
    }

    .btn-modern {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 50px;
        font-weight: 600;
        transition: all 0.3s ease;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary-modern {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .btn-primary-modern:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }

    .user-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        overflow: hidden;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.05);
        border-radius: 15px;
    }

    .user-table thead {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .user-table th {
        padding: 1.2rem;
        text-align: left;
        font-weight: 600;
        letter-spacing: 0.5px;
    }

    .user-table td {
        padding: 1rem 1.2rem;
        background: white;
        border-bottom: 1px solid #f0f0f0;
    }

    .user-table tbody tr {
        transition: all 0.3s ease;
    }

    .user-table tbody tr:hover {
        background: #f8f9fa;
        transform: scale(1.01);
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 1.2rem;
    }

    .user-details {
        display: flex;
        flex-direction: column;
    }

    .user-name {
        font-weight: 600;
        color: #2c3e50;
    }

    .user-email {
        font-size: 0.875rem;
        color: #7f8c8d;
    }

    .role-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        margin: 0.125rem;
    }

    .role-admin {
        background: #e3f2fd;
        color: #1976d2;
    }

    .role-user {
        background: #f3e5f5;
        color: #7b1fa2;
    }

    .role-pending {
        background: #fff3e0;
        color: #f57c00;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .btn-icon {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-edit {
        background: #e3f2fd;
        color: #1976d2;
    }

    .btn-edit:hover {
        background: #1976d2;
        color: white;
        transform: scale(1.1);
    }

    .btn-roles {
        background: #f3e5f5;
        color: #7b1fa2;
    }

    .btn-roles:hover {
        background: #7b1fa2;
        color: white;
        transform: scale(1.1);
    }

    .btn-delete {
        background: #ffebee;
        color: #c62828;
    }

    .btn-delete:hover {
        background: #c62828;
        color: white;
        transform: scale(1.1);
    }

    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .empty-state {
        text-align: center;
        padding: 3rem;
        color: #7f8c8d;
    }

    .empty-state i {
        font-size: 4rem;
        color: #e0e0e0;
        margin-bottom: 1rem;
    }

    .search-box {
        position: relative;
        width: 300px;
    }

    .search-box input {
        width: 100%;
        padding: 0.75rem 3rem;
        border: 2px solid #e0e0e0;
        border-radius: 50px;
        transition: all 0.3s ease;
    }

    .search-box input:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .search-box i {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: #7f8c8d;
    }

    .clear-search {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        background: transparent;
        border: none;
        color: #7f8c8d;
        cursor: pointer;
        padding: 0.25rem;
        transition: all 0.3s ease;
    }

    .clear-search:hover {
        color: #667eea;
    }

    .search-info {
        margin: 1rem 0;
        padding: 0.75rem 1rem;
        background: #f0f5ff;
        border-left: 4px solid #667eea;
        border-radius: 5px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    /* Modal Styles */
    .modal-modern {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        animation: fadeIn 0.3s ease;
        padding: 20px;
        box-sizing: border-box;
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    .modal-content-modern {
        background: white;
        border-radius: 15px;
        width: 100%;
        max-width: 600px;
        max-height: calc(100vh - 40px);
        animation: slideUp 0.3s ease;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    @@keyframes slideUp {
        from {
            transform: translateY(30px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    .modal-header-modern {
        padding: 1rem 1.5rem;
        border-bottom: 1px solid #e0e0e0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        flex-shrink: 0;
        height: 60px;
    }

    .modal-title-modern {
        font-size: 1.2rem;
        font-weight: 600;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-close-modern {
        background: transparent;
        border: none;
        color: white;
        font-size: 1.2rem;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
    }

    .btn-close-modern:hover {
        background: rgba(255, 255, 255, 0.2);
    }

    .modal-body-modern {
        padding: 1.5rem;
        overflow-y: auto;
        flex: 1;
        max-height: calc(100vh - 180px);
    }

    .modal-footer-modern {
        padding: 1rem 1.5rem;
        border-top: 1px solid #e0e0e0;
        background: #f8f9fa;
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        flex-shrink: 0;
        height: 70px;
        align-items: center;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: #2c3e50;
        font-size: 0.9rem;
    }

    .form-control {
        width: 100%;
        padding: 0.6rem;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        font-size: 0.9rem;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.1);
    }

    .form-control:disabled {
        background-color: #f8f9fa;
        color: #6c757d;
    }

    .text-danger {
        color: #e74c3c !important;
    }

    .text-muted {
        color: #7f8c8d;
        font-size: 0.8rem;
        margin-top: 0.25rem;
        line-height: 1.3;
    }

    .validation-message {
        color: #e74c3c;
        font-size: 0.8rem;
        margin-top: 0.25rem;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
        margin: 0 -0.5rem;
    }

    .col-md-6 {
        flex: 0 0 50%;
        max-width: 50%;
        padding: 0 0.5rem;
    }

    .col-12 {
        flex: 0 0 100%;
        max-width: 100%;
        padding: 0 0.5rem;
    }

    .mb-3 {
        margin-bottom: 1rem;
    }

    .btn-secondary-modern {
        background: #e0e0e0;
        color: #666;
    }

    .btn-secondary-modern:hover {
        background: #d0d0d0;
        transform: translateY(-1px);
    }

    .spinner-border {
        display: inline-block;
        width: 16px;
        height: 16px;
        border: 2px solid transparent;
        border-top: 2px solid currentColor;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .alert-danger {
        background: linear-gradient(135deg, #ffe6e6 0%, #ffcccc 100%);
        color: #c62828;
        border-left: 4px solid #f44336;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .page-container {
            padding: 1rem;
        }

        .content-card {
            padding: 1rem;
        }

        .header-section {
            flex-direction: column;
            gap: 1rem;
            align-items: stretch;
        }

        .page-title {
            font-size: 1.5rem;
            text-align: center;
        }

        .btn-modern {
            width: 100%;
            justify-content: center;
        }

        .search-box {
            width: 100%;
        }

        .user-table {
            font-size: 0.85rem;
        }

        .user-table th,
        .user-table td {
            padding: 0.75rem 0.5rem;
        }

        .action-buttons {
            justify-content: center;
            gap: 0.25rem;
        }

        .btn-icon {
            width: 30px;
            height: 30px;
            font-size: 0.8rem;
        }

        .modal-content-modern {
            width: 95%;
            max-height: 90vh;
        }

        .col-md-6 {
            flex: 0 0 100%;
            max-width: 100%;
        }

        .modal-footer-modern {
            flex-direction: column-reverse;
            gap: 0.75rem;
            height: auto;
            padding: 1rem;
        }

        .btn-modern {
            width: 100%;
            justify-content: center;
        }
    }

    @@media (max-width: 576px) {
        .page-container {
            padding: 0.5rem;
        }

        .content-card {
            border-radius: 10px;
            padding: 0.75rem;
        }

        .page-title {
            font-size: 1.25rem;
        }

        .user-table {
            font-size: 0.8rem;
        }

        .user-table th,
        .user-table td {
            padding: 0.6rem 0.4rem;
        }

        .btn-icon {
            width: 28px;
            height: 28px;
            font-size: 0.75rem;
        }

        .role-badge {
            font-size: 0.65rem;
            padding: 0.15rem 0.5rem;
        }

        .modal-content-modern {
            width: 98%;
            margin: 1rem;
        }

        .modal-header-modern {
            padding: 0.75rem 1rem;
        }

        .modal-body-modern {
            padding: 1rem;
        }

        .modal-footer-modern {
            padding: 0.75rem 1rem;
        }

        .modal-title-modern {
            font-size: 1.1rem;
        }

        .btn-modern {
            padding: 0.6rem 1.2rem;
            font-size: 0.85rem;
        }
    }
</style>

<div class="page-container">
    <div class="content-card">
        <div class="header-section">
            <h1 class="page-title">
                <i class="fas fa-users"></i> Gestión de Usuarios
            </h1>
            <div style="display: flex; gap: 1rem; align-items: center;">
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input type="text" 
                           placeholder="Buscar usuarios..." 
                           @bind="searchTerm" 
                           @bind:event="oninput"
                           @onkeypress="@(async (e) => { if (e.Key == "Enter") await SearchUsers(); })" />
                    @if (!string.IsNullOrEmpty(searchTerm))
                    {
                        <button class="clear-search" @onclick="ClearSearch" title="Limpiar búsqueda">
                            <i class="fas fa-times"></i>
                        </button>
                    }
                </div>
                <button class="btn-modern btn-primary-modern" @onclick="ShowCreateModal">
                    <i class="fas fa-user-plus"></i>
                    Nuevo Usuario
                </button>
            </div>
        </div>

        @if (isLoading)
        {
            <div style="text-align: center; padding: 3rem;">
                <div class="loading-spinner"></div>
                <p style="margin-top: 1rem; color: #7f8c8d;">Cargando usuarios...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(searchTerm) && filteredUsers != null)
        {
            <div class="search-info">
                <span>
                    Mostrando <strong>@filteredUsers.Count</strong> resultado(s) para "<strong>@searchTerm</strong>"
                </span>
                <button class="btn-modern" style="padding: 0.5rem 1rem; font-size: 0.875rem;" @onclick="ClearSearch">
                    <i class="fas fa-times"></i> Limpiar filtro
                </button>
            </div>
            
            @if (!filteredUsers.Any())
            {
                <div class="empty-state">
                    <i class="fas fa-search"></i>
                    <h3>No se encontraron usuarios</h3>
                    <p>No hay usuarios que coincidan con "<strong>@searchTerm</strong>"</p>
                    <button class="btn-modern btn-primary-modern" @onclick="ClearSearch">
                        Mostrar todos los usuarios
                    </button>
                </div>
            }
            else
            {
                <table class="user-table">
                    <thead>
                        <tr>
                            <th>Usuario</th>
                            <th>Nombre Completo</th>
                            <th>Roles</th>
                            <th>Estado</th>
                            <th style="text-align: center;">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in filteredUsers)
                        {
                            <tr>
                                <td>
                                    <div class="user-info">
                                        <div class="user-avatar">
                                            @user.FirstName.Substring(0, 1).ToUpper()
                                        </div>
                                        <div class="user-details">
                                            <span class="user-name">@user.Email</span>
                                        </div>
                                    </div>
                                </td>
                                <td>@user.FirstName @user.LastName</td>
                                <td>
                                    @if (userRoles.ContainsKey(user.UserId))
                                    {
                                        @foreach (var role in userRoles[user.UserId])
                                        {
                                            <span class="role-badge @GetRoleClass(role)">@role</span>
                                        }
                                    }
                                    else
                                    {
                                        <span class="role-badge role-pending">Sin Roles</span>
                                    }
                                </td>
                                <td>
                                    <span style="color: #27ae60;">
                                        <i class="fas fa-check-circle"></i> Activo
                                    </span>
                                </td>
                                <td>
                                    <div class="action-buttons" style="justify-content: center;">
                                        <button class="btn-icon btn-edit" @onclick="() => ShowEditModal(user)" title="Editar">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn-icon btn-roles" @onclick="() => ShowRoleModal(user)" title="Gestionar Roles">
                                            <i class="fas fa-user-tag"></i>
                                        </button>
                                        <button class="btn-icon btn-delete" @onclick="() => ConfirmDelete(user)" title="Eliminar">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                @if (!string.IsNullOrEmpty(searchTerm))
                {
                    <p style="text-align: center; margin-top: 1rem; color: #7f8c8d;">
                        <i class="fas fa-info-circle"></i> La búsqueda solo muestra resultados de la página actual
                    </p>
                }
            }
        }
        else if (filteredUsers == null || !filteredUsers.Any())
        {
            <div class="empty-state">
                <i class="fas fa-users-slash"></i>
                <h3>No hay usuarios registrados</h3>
                <p>Comienza agregando un nuevo usuario</p>
            </div>
        }
        else
        {
            <table class="user-table">
                <thead>
                    <tr>
                        <th>Usuario</th>
                        <th>Nombre Completo</th>
                        <th>Roles</th>
                        <th>Estado</th>
                        <th style="text-align: center;">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in filteredUsers)
                    {
                        <tr>
                            <td>
                                <div class="user-info">
                                    <div class="user-avatar">
                                        @user.FirstName.Substring(0, 1).ToUpper()
                                    </div>
                                    <div class="user-details">
                                        <span class="user-name">@user.Email</span>
                                    </div>
                                </div>
                            </td>
                            <td>@user.FirstName @user.LastName</td>
                            <td>
                                @if (userRoles.ContainsKey(user.UserId))
                                {
                                    @foreach (var role in userRoles[user.UserId])
                                    {
                                        <span class="role-badge @GetRoleClass(role)">@role</span>
                                    }
                                }
                                else
                                {
                                    <span class="role-badge role-pending">Sin Roles</span>
                                }
                            </td>
                            <td>
                                <span style="color: #27ae60;">
                                    <i class="fas fa-check-circle"></i> Activo
                                </span>
                            </td>
                            <td>
                                <div class="action-buttons" style="justify-content: center;">
                                    <button class="btn-icon btn-edit" @onclick="() => ShowEditModal(user)" title="Editar">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn-icon btn-roles" @onclick="() => ShowRoleModal(user)" title="Gestionar Roles">
                                        <i class="fas fa-user-tag"></i>
                                    </button>
                                    <button class="btn-icon btn-delete" @onclick="() => ConfirmDelete(user)" title="Eliminar">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            @if (totalAmountOfPages > 1)
            {
                <Pagination CurrentPage="@paginationDTO.Page"
                            SelectedPage="SelectedPage" 
                            TotalAmountPages="totalAmountOfPages" />
            }
        }
    </div>
</div>

<!-- Modal Create/Edit User -->
@if (showUserModal)
{
    <div class="modal-modern" @onclick="CloseUserModal">
        <div class="modal-content-modern" @onclick:stopPropagation="true">
            <div class="modal-header-modern">
                <h2 class="modal-title-modern">
                    <i class="fas @(isEditMode ? "fa-user-edit" : "fa-user-plus")"></i>
                    @(isEditMode ? "Editar Usuario" : "Nuevo Usuario")
                </h2>
                <button type="button" class="btn-close-modern" @onclick="CloseUserModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <EditForm Model="@userInfo" OnValidSubmit="@HandleUserSubmit">
                <div class="modal-body-modern">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert-danger" />

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">
                                <i class="fas fa-envelope" style="margin-right: 0.5rem;"></i>Email <span class="text-danger">*</span>
                            </label>
                            <InputText class="form-control" @bind-Value="userInfo.Email" placeholder="usuario@ejemplo.com" disabled="@isEditMode" />
                            <ValidationMessage For="@(() => userInfo.Email)" class="validation-message" />
                        </div>

                        <div class="col-md-6 mb-3">
                            <!-- Columna vacía -->
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">
                                <i class="fas fa-user" style="margin-right: 0.5rem;"></i>Nombres <span class="text-danger">*</span>
                            </label>
                            <InputText class="form-control" @bind-Value="userInfo.FirstName" placeholder="Ingrese nombres" />
                            <ValidationMessage For="@(() => userInfo.FirstName)" class="validation-message" />
                        </div>

                        <div class="col-md-6 mb-3">
                            <label class="form-label">
                                <i class="fas fa-user" style="margin-right: 0.5rem;"></i>Apellidos <span class="text-danger">*</span>
                            </label>
                            <InputText class="form-control" @bind-Value="userInfo.LastName" placeholder="Ingrese apellidos" />
                            <ValidationMessage For="@(() => userInfo.LastName)" class="validation-message" />
                        </div>
                    </div>

                    <div class="row">
                        @if (!isEditMode)
                        {
                            <div class="col-md-6 mb-3">
                                <label class="form-label">
                                    <i class="fas fa-lock" style="margin-right: 0.5rem;"></i>Contraseña <span class="text-danger">*</span>
                                </label>
                                <InputText type="password" class="form-control" @bind-Value="userInfo.Password" placeholder="Mínimo 8 caracteres" />
                                <ValidationMessage For="@(() => userInfo.Password)" class="validation-message" />
                            </div>
                        }
                        else
                        {
                            <div class="col-md-6 mb-3">
                                <label class="form-label">
                                    <i class="fas fa-lock" style="margin-right: 0.5rem;"></i>Nueva Contraseña (opcional)
                                </label>
                                <InputText type="password" class="form-control" @bind-Value="userInfo.Password" placeholder="Dejar en blanco para no cambiar" />
                                <small class="text-muted">Solo complete si desea cambiar la contraseña</small>
                            </div>
                        }

                        @if (!isEditMode)
                        {
                            <div class="col-md-6 mb-3">
                                <label class="form-label">
                                    <i class="fas fa-lock" style="margin-right: 0.5rem;"></i>Confirmar Contraseña <span class="text-danger">*</span>
                                </label>
                                <InputText type="password" class="form-control" @bind-Value="userInfo.ConfirmPassword" placeholder="Repita la contraseña" />
                                <ValidationMessage For="@(() => userInfo.ConfirmPassword)" class="validation-message" />
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(userInfo.Password))
                        {
                            <div class="col-md-6 mb-3">
                                <label class="form-label">
                                    <i class="fas fa-lock" style="margin-right: 0.5rem;"></i>Confirmar Nueva Contraseña
                                </label>
                                <InputText type="password" class="form-control" @bind-Value="userInfo.ConfirmPassword" placeholder="Repita la nueva contraseña" />
                                <ValidationMessage For="@(() => userInfo.ConfirmPassword)" class="validation-message" />
                            </div>
                        }
                    </div>
                </div>
                
                <div class="modal-footer-modern">
                    <button type="button" class="btn-modern btn-secondary-modern" @onclick="CloseUserModal" disabled="@isSaving">
                        <i class="fas fa-times"></i> Cancelar
                    </button>
                    <button type="submit" class="btn-modern btn-primary-modern" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <div class="spinner-border"></div>
                            <span style="margin-left: 0.5rem;">Guardando...</span>
                        }
                        else
                        {
                            <i class="fas fa-save"></i>
                            <span>@(isEditMode ? "Actualizar" : "Guardar")</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

<!-- Modal Manage Roles -->
@if (showRoleModal)
{
    <div class="modal-modern" @onclick="CloseRoleModal">
        <div class="modal-content-modern" @onclick:stopPropagation="true">
            <div class="modal-header-modern">
                <h2 class="modal-title-modern">
                    <i class="fas fa-user-tag"></i>
                    Gestionar Roles
                </h2>
                <button type="button" class="btn-close-modern" @onclick="CloseRoleModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="modal-body-modern">
                <p style="margin-bottom: 1.5rem; font-weight: 600;">
                    <strong>Usuario:</strong> @selectedUser?.Email
                </p>

                <h6 style="margin-bottom: 1rem; color: #2c3e50;">Roles Disponibles:</h6>
                
                @if (availableRoles != null && availableRoles.Any())
                {
                    @foreach (var role in availableRoles)
                    {
                        var isChecked = userRoles.ContainsKey(selectedUser!.UserId) && 
                                       userRoles[selectedUser.UserId].Contains(role.RoleName);
                        
                        <div style="display: flex; align-items: center; gap: 0.75rem; margin-bottom: 1rem; padding: 0.75rem; background: #f8f9fa; border-radius: 8px;">
                            <input type="checkbox" 
                                   style="width: 18px; height: 18px; cursor: pointer;"
                                   id="@($"role-{role.RoleName}")" 
                                   checked="@isChecked"
                                   @onchange="@((e) => ToggleRole(role.RoleName, (bool)e.Value!))" />
                            <label style="cursor: pointer; user-select: none; font-weight: 600; color: #2c3e50; font-size: 0.9rem; flex: 1;" for="@($"role-{role.RoleName}")">
                                <span style="display: inline-flex; align-items: center; gap: 0.5rem; padding: 0.35rem 0.8rem; border-radius: 20px; font-size: 0.75rem; font-weight: 600; background: @(role.RoleName.ToLower() == "admin" ? "#e3f2fd" : "#f5f5f5"); color: @(role.RoleName.ToLower() == "admin" ? "#1976d2" : "#666");">
                                    <i class="fas @(role.RoleName.ToLower() == "admin" ? "fa-crown" : "fa-user")"></i>
                                    @role.RoleName
                                </span>
                            </label>
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted">No hay roles disponibles.</p>
                }
            </div>
            
            <div class="modal-footer-modern">
                <button type="button" class="btn-modern btn-secondary-modern" @onclick="CloseRoleModal">
                    <i class="fas fa-times"></i> Cerrar
                </button>
                <button type="button" class="btn-modern btn-primary-modern" @onclick="SaveRoles" disabled="@isSavingRoles">
                    @if (isSavingRoles)
                    {
                        <div class="spinner-border"></div>
                        <span style="margin-left: 0.5rem;">Guardando...</span>
                    }
                    else
                    {
                        <i class="fas fa-save"></i>
                        <span>Guardar Cambios</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

@code {
    // Models
    private List<UserDTO> users = new();
    private List<UserDTO> filteredUsers = new();
    private UserEditDTO userInfo = new();
    private UserDTO? selectedUser;
    private Dictionary<string, List<string>> userRoles = new();
    private Dictionary<string, bool> pendingRoleChanges = new();
    private List<RoleDTO> availableRoles = new();
    
    // UI State
    private bool showUserModal = false;
    private bool showRoleModal = false;
    private bool isEditMode = false;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isSavingRoles = false;
    private string _searchTerm = "";
    
    // Pagination
    private PaginationDTO paginationDTO = new() { RecordsPerPage = 10 };
    private int totalAmountOfPages;

    // Propiedad para searchTerm con filtrado automático
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            FilterUsers();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            
            // Load users
            await LoadUsers();
            
            // Load roles
            availableRoles = await usersRepository.GetRoles();
            
            // Load user roles
            await LoadUserRoles();
        }
        catch (Exception ex)
        {
            await displayMessage.DisplayErrorMessage($"Error al cargar datos: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadUsers()
    {
        var paginatedResponse = await usersRepository.GetUsers(paginationDTO);
        users = paginatedResponse.Response;
        totalAmountOfPages = paginatedResponse.TotalAmountPages;
        FilterUsers();
    }

    private async Task LoadUserRoles()
    {
        userRoles.Clear();
        
        foreach (var user in users)
        {
            try
            {
                var roles = await usersRepository.GetUserRoles(user.UserId);
                userRoles[user.UserId] = roles;
            }
            catch
            {
                userRoles[user.UserId] = new List<string>();
            }
        }
    }

    private void FilterUsers()
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            filteredUsers = new List<UserDTO>(users);
        }
        else
        {
            var searchLower = _searchTerm.ToLower();
            filteredUsers = users.Where(u => 
                u.Email.ToLower().Contains(searchLower) ||
                u.FirstName.ToLower().Contains(searchLower) ||
                u.LastName.ToLower().Contains(searchLower) ||
                $"{u.FirstName} {u.LastName}".ToLower().Contains(searchLower)
            ).ToList();
        }
        StateHasChanged(); // Forzar actualización de la UI
    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await LoadUsers();
    }

    private void ShowCreateModal()
    {
        userInfo = new UserEditDTO();
        isEditMode = false;
        showUserModal = true;
    }

    private void ShowEditModal(UserDTO user)
    {
        userInfo = new UserEditDTO
        {
            UserId = user.UserId,
            Email = user.Email,
            FirstName = user.FirstName,
            LastName = user.LastName,
            Password = "", // Vacío para edición
            ConfirmPassword = "" // Vacío para edición
        };
        isEditMode = true;
        showUserModal = true;
    }

    private void ShowRoleModal(UserDTO user)
    {
        selectedUser = user;
        pendingRoleChanges.Clear();
        showRoleModal = true;
    }

    private void CloseUserModal()
    {
        showUserModal = false;
        userInfo = new UserEditDTO();
    }

    private void CloseRoleModal()
    {
        showRoleModal = false;
        selectedUser = null;
        pendingRoleChanges.Clear();
    }

    private async Task HandleUserSubmit()
    {
        try
        {
            isSaving = true;

            if (isEditMode)
            {
                // Para actualización, si la contraseña está vacía, confirmPassword también debe estar vacío
                if (string.IsNullOrEmpty(userInfo.Password))
                {
                    userInfo.ConfirmPassword = "";
                }

                // Actualizar usuario existente
                await usersRepository.UpdateUser(userInfo);
                await displayMessage.DisplaySuccessMessage("Usuario actualizado correctamente");
            }
            else
            {
                // Verificar si el email ya existe
                var emailExists = await usersRepository.CheckEmailExists(userInfo.Email);
                if (emailExists)
                {
                    await displayMessage.DisplayErrorMessage("El email ya está registrado");
                    return;
                }

                // Crear nuevo usuario
                var userToken = await accountsRepository.Register(userInfo);
                await displayMessage.DisplaySuccessMessage("Usuario creado correctamente");
            }

            CloseUserModal();
            await LoadData();
        }
        catch (Exception ex)
        {
            var errorMessage = ex.Message;
            if (ex.Message.Contains("400"))
            {
                errorMessage = "Error: Verifique que los datos sean correctos";
            }
            else if (ex.Message.Contains("404"))
            {
                errorMessage = "Error: Usuario no encontrado";
            }
            else if (ex.Message.Contains("500"))
            {
                errorMessage = "Error del servidor, intente nuevamente";
            }
            
            await displayMessage.DisplayErrorMessage(errorMessage);
        }
        finally
        {
            isSaving = false;
        }
    }

    private void ToggleRole(string roleName, bool isChecked)
    {
        pendingRoleChanges[roleName] = isChecked;
    }

    private async Task SaveRoles()
    {
        try
        {
            isSavingRoles = true;
            var errors = new List<string>();
            var successes = 0;

            foreach (var change in pendingRoleChanges)
            {
                var editRole = new EditRoleDTO
                {
                    UserId = selectedUser!.UserId,
                    RoleName = change.Key
                };

                try
                {
                    if (change.Value)
                    {
                        await usersRepository.AssignRole(editRole);
                        successes++;
                    }
                    else
                    {
                        await usersRepository.RemoveRole(editRole);
                        successes++;
                    }
                }
                catch (Exception ex)
                {
                    errors.Add($"{change.Key}: {ex.Message}");
                }
            }

            if (errors.Any())
            {
                await displayMessage.DisplayErrorMessage($"Errores al actualizar roles: {string.Join(", ", errors)}");
            }
            else if (successes > 0)
            {
                await displayMessage.DisplaySuccessMessage($"Se actualizaron {successes} roles correctamente");
            }

            CloseRoleModal();
            await LoadUserRoles();
        }
        catch (Exception ex)
        {
            await displayMessage.DisplayErrorMessage($"Error general: {ex.Message}");
        }
        finally
        {
            isSavingRoles = false;
        }
    }

    private async Task ConfirmDelete(UserDTO user)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"¿Está seguro de eliminar al usuario {user.Email}?");
        
        if (confirmed)
        {
            try
            {
                await usersRepository.DeleteUser(user.UserId);
                await displayMessage.DisplaySuccessMessage("Usuario eliminado correctamente");
                await LoadData();
            }
            catch (Exception ex)
            {
                var errorMessage = "Error al eliminar usuario";
                
                // Parsear mensajes de error específicos
                if (ex.Message.Contains("propio usuario"))
                {
                    errorMessage = "No puede eliminar su propio usuario";
                }
                else if (ex.Message.Contains("último administrador"))
                {
                    errorMessage = "No se puede eliminar el último administrador del sistema";
                }
                else if (ex.Message.Contains("404"))
                {
                    errorMessage = "Usuario no encontrado";
                }
                
                await displayMessage.DisplayErrorMessage(errorMessage);
            }
        }
    }

    private async Task SearchUsers()
    {
        // Forzar actualización de la búsqueda
        FilterUsers();
        await Task.CompletedTask;
    }

    private void ClearSearch()
    {
        searchTerm = "";
        FilterUsers();
    }

    private string GetRoleClass(string role)
    {
        return role.ToLower() switch
        {
            "admin" => "role-admin",
            "user" => "role-user",
            _ => "role-pending"
        };
    }
}